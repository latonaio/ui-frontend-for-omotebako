// source: calendar.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.calendarpb.Date', null, global);
goog.exportSymbol('proto.calendarpb.ResponseSchedule', null, global);
goog.exportSymbol('proto.calendarpb.ResponseStatusCode', null, global);
goog.exportSymbol('proto.calendarpb.ResponseTag', null, global);
goog.exportSymbol('proto.calendarpb.Schedule', null, global);
goog.exportSymbol('proto.calendarpb.ScheduleList', null, global);
goog.exportSymbol('proto.calendarpb.Tag', null, global);
goog.exportSymbol('proto.calendarpb.TagList', null, global);
goog.exportSymbol('proto.calendarpb.User', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.calendarpb.Schedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.calendarpb.Schedule.repeatedFields_, null);
};
goog.inherits(proto.calendarpb.Schedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.calendarpb.Schedule.displayName = 'proto.calendarpb.Schedule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.calendarpb.Tag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.calendarpb.Tag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.calendarpb.Tag.displayName = 'proto.calendarpb.Tag';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.calendarpb.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.calendarpb.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.calendarpb.User.displayName = 'proto.calendarpb.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.calendarpb.Date = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.calendarpb.Date, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.calendarpb.Date.displayName = 'proto.calendarpb.Date';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.calendarpb.ResponseSchedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.calendarpb.ResponseSchedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.calendarpb.ResponseSchedule.displayName = 'proto.calendarpb.ResponseSchedule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.calendarpb.ResponseTag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.calendarpb.ResponseTag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.calendarpb.ResponseTag.displayName = 'proto.calendarpb.ResponseTag';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.calendarpb.ScheduleList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.calendarpb.ScheduleList.repeatedFields_, null);
};
goog.inherits(proto.calendarpb.ScheduleList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.calendarpb.ScheduleList.displayName = 'proto.calendarpb.ScheduleList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.calendarpb.TagList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.calendarpb.TagList.repeatedFields_, null);
};
goog.inherits(proto.calendarpb.TagList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.calendarpb.TagList.displayName = 'proto.calendarpb.TagList';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.calendarpb.Schedule.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.calendarpb.Schedule.prototype.toObject = function(opt_includeInstance) {
  return proto.calendarpb.Schedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.calendarpb.Schedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.calendarpb.Schedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    scheduleid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    date: (f = msg.getDate()) && proto.calendarpb.Date.toObject(includeInstance, f),
    title: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    user: (f = msg.getUser()) && proto.calendarpb.User.toObject(includeInstance, f),
    taglistList: jspb.Message.toObjectList(msg.getTaglistList(),
    proto.calendarpb.Tag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.calendarpb.Schedule}
 */
proto.calendarpb.Schedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.calendarpb.Schedule;
  return proto.calendarpb.Schedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.calendarpb.Schedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.calendarpb.Schedule}
 */
proto.calendarpb.Schedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScheduleid(value);
      break;
    case 2:
      var value = new proto.calendarpb.Date;
      reader.readMessage(value,proto.calendarpb.Date.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = new proto.calendarpb.User;
      reader.readMessage(value,proto.calendarpb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 6:
      var value = new proto.calendarpb.Tag;
      reader.readMessage(value,proto.calendarpb.Tag.deserializeBinaryFromReader);
      msg.addTaglist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.calendarpb.Schedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.calendarpb.Schedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.calendarpb.Schedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.calendarpb.Schedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScheduleid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.calendarpb.Date.serializeBinaryToWriter
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.calendarpb.User.serializeBinaryToWriter
    );
  }
  f = message.getTaglistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.calendarpb.Tag.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 scheduleId = 1;
 * @return {number}
 */
proto.calendarpb.Schedule.prototype.getScheduleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.calendarpb.Schedule} returns this
 */
proto.calendarpb.Schedule.prototype.setScheduleid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Date date = 2;
 * @return {?proto.calendarpb.Date}
 */
proto.calendarpb.Schedule.prototype.getDate = function() {
  return /** @type{?proto.calendarpb.Date} */ (
    jspb.Message.getWrapperField(this, proto.calendarpb.Date, 2));
};


/**
 * @param {?proto.calendarpb.Date|undefined} value
 * @return {!proto.calendarpb.Schedule} returns this
*/
proto.calendarpb.Schedule.prototype.setDate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.calendarpb.Schedule} returns this
 */
proto.calendarpb.Schedule.prototype.clearDate = function() {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.calendarpb.Schedule.prototype.hasDate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.calendarpb.Schedule.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.calendarpb.Schedule} returns this
 */
proto.calendarpb.Schedule.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.calendarpb.Schedule.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.calendarpb.Schedule} returns this
 */
proto.calendarpb.Schedule.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional User user = 5;
 * @return {?proto.calendarpb.User}
 */
proto.calendarpb.Schedule.prototype.getUser = function() {
  return /** @type{?proto.calendarpb.User} */ (
    jspb.Message.getWrapperField(this, proto.calendarpb.User, 5));
};


/**
 * @param {?proto.calendarpb.User|undefined} value
 * @return {!proto.calendarpb.Schedule} returns this
*/
proto.calendarpb.Schedule.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.calendarpb.Schedule} returns this
 */
proto.calendarpb.Schedule.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.calendarpb.Schedule.prototype.hasUser = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Tag tagList = 6;
 * @return {!Array<!proto.calendarpb.Tag>}
 */
proto.calendarpb.Schedule.prototype.getTaglistList = function() {
  return /** @type{!Array<!proto.calendarpb.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.calendarpb.Tag, 6));
};


/**
 * @param {!Array<!proto.calendarpb.Tag>} value
 * @return {!proto.calendarpb.Schedule} returns this
*/
proto.calendarpb.Schedule.prototype.setTaglistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.calendarpb.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.calendarpb.Tag}
 */
proto.calendarpb.Schedule.prototype.addTaglist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.calendarpb.Tag, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.calendarpb.Schedule} returns this
 */
proto.calendarpb.Schedule.prototype.clearTaglistList = function() {
  return this.setTaglistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.calendarpb.Tag.prototype.toObject = function(opt_includeInstance) {
  return proto.calendarpb.Tag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.calendarpb.Tag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.calendarpb.Tag.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tagname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.calendarpb.Tag}
 */
proto.calendarpb.Tag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.calendarpb.Tag;
  return proto.calendarpb.Tag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.calendarpb.Tag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.calendarpb.Tag}
 */
proto.calendarpb.Tag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTagid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTagname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.calendarpb.Tag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.calendarpb.Tag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.calendarpb.Tag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.calendarpb.Tag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTagid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTagname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 tagId = 1;
 * @return {number}
 */
proto.calendarpb.Tag.prototype.getTagid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.calendarpb.Tag} returns this
 */
proto.calendarpb.Tag.prototype.setTagid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string tagName = 2;
 * @return {string}
 */
proto.calendarpb.Tag.prototype.getTagname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.calendarpb.Tag} returns this
 */
proto.calendarpb.Tag.prototype.setTagname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.calendarpb.User.prototype.toObject = function(opt_includeInstance) {
  return proto.calendarpb.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.calendarpb.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.calendarpb.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    username: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.calendarpb.User}
 */
proto.calendarpb.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.calendarpb.User;
  return proto.calendarpb.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.calendarpb.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.calendarpb.User}
 */
proto.calendarpb.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.calendarpb.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.calendarpb.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.calendarpb.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.calendarpb.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 userId = 1;
 * @return {number}
 */
proto.calendarpb.User.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.calendarpb.User} returns this
 */
proto.calendarpb.User.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string userName = 2;
 * @return {string}
 */
proto.calendarpb.User.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.calendarpb.User} returns this
 */
proto.calendarpb.User.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.calendarpb.Date.prototype.toObject = function(opt_includeInstance) {
  return proto.calendarpb.Date.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.calendarpb.Date} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.calendarpb.Date.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: (f = msg.getStart()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.calendarpb.Date}
 */
proto.calendarpb.Date.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.calendarpb.Date;
  return proto.calendarpb.Date.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.calendarpb.Date} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.calendarpb.Date}
 */
proto.calendarpb.Date.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.calendarpb.Date.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.calendarpb.Date.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.calendarpb.Date} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.calendarpb.Date.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp start = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.calendarpb.Date.prototype.getStart = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.calendarpb.Date} returns this
*/
proto.calendarpb.Date.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.calendarpb.Date} returns this
 */
proto.calendarpb.Date.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.calendarpb.Date.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp end = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.calendarpb.Date.prototype.getEnd = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.calendarpb.Date} returns this
*/
proto.calendarpb.Date.prototype.setEnd = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.calendarpb.Date} returns this
 */
proto.calendarpb.Date.prototype.clearEnd = function() {
  return this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.calendarpb.Date.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.calendarpb.ResponseSchedule.prototype.toObject = function(opt_includeInstance) {
  return proto.calendarpb.ResponseSchedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.calendarpb.ResponseSchedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.calendarpb.ResponseSchedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    schedule: (f = msg.getSchedule()) && proto.calendarpb.Schedule.toObject(includeInstance, f),
    statuscode: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.calendarpb.ResponseSchedule}
 */
proto.calendarpb.ResponseSchedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.calendarpb.ResponseSchedule;
  return proto.calendarpb.ResponseSchedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.calendarpb.ResponseSchedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.calendarpb.ResponseSchedule}
 */
proto.calendarpb.ResponseSchedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.calendarpb.Schedule;
      reader.readMessage(value,proto.calendarpb.Schedule.deserializeBinaryFromReader);
      msg.setSchedule(value);
      break;
    case 2:
      var value = /** @type {!proto.calendarpb.ResponseStatusCode} */ (reader.readEnum());
      msg.setStatuscode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.calendarpb.ResponseSchedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.calendarpb.ResponseSchedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.calendarpb.ResponseSchedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.calendarpb.ResponseSchedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchedule();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.calendarpb.Schedule.serializeBinaryToWriter
    );
  }
  f = message.getStatuscode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Schedule schedule = 1;
 * @return {?proto.calendarpb.Schedule}
 */
proto.calendarpb.ResponseSchedule.prototype.getSchedule = function() {
  return /** @type{?proto.calendarpb.Schedule} */ (
    jspb.Message.getWrapperField(this, proto.calendarpb.Schedule, 1));
};


/**
 * @param {?proto.calendarpb.Schedule|undefined} value
 * @return {!proto.calendarpb.ResponseSchedule} returns this
*/
proto.calendarpb.ResponseSchedule.prototype.setSchedule = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.calendarpb.ResponseSchedule} returns this
 */
proto.calendarpb.ResponseSchedule.prototype.clearSchedule = function() {
  return this.setSchedule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.calendarpb.ResponseSchedule.prototype.hasSchedule = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseStatusCode statusCode = 2;
 * @return {!proto.calendarpb.ResponseStatusCode}
 */
proto.calendarpb.ResponseSchedule.prototype.getStatuscode = function() {
  return /** @type {!proto.calendarpb.ResponseStatusCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.calendarpb.ResponseStatusCode} value
 * @return {!proto.calendarpb.ResponseSchedule} returns this
 */
proto.calendarpb.ResponseSchedule.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.calendarpb.ResponseTag.prototype.toObject = function(opt_includeInstance) {
  return proto.calendarpb.ResponseTag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.calendarpb.ResponseTag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.calendarpb.ResponseTag.toObject = function(includeInstance, msg) {
  var f, obj = {
    tag: (f = msg.getTag()) && proto.calendarpb.Tag.toObject(includeInstance, f),
    statuscode: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.calendarpb.ResponseTag}
 */
proto.calendarpb.ResponseTag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.calendarpb.ResponseTag;
  return proto.calendarpb.ResponseTag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.calendarpb.ResponseTag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.calendarpb.ResponseTag}
 */
proto.calendarpb.ResponseTag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.calendarpb.Tag;
      reader.readMessage(value,proto.calendarpb.Tag.deserializeBinaryFromReader);
      msg.setTag(value);
      break;
    case 2:
      var value = /** @type {!proto.calendarpb.ResponseStatusCode} */ (reader.readEnum());
      msg.setStatuscode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.calendarpb.ResponseTag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.calendarpb.ResponseTag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.calendarpb.ResponseTag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.calendarpb.ResponseTag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTag();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.calendarpb.Tag.serializeBinaryToWriter
    );
  }
  f = message.getStatuscode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Tag tag = 1;
 * @return {?proto.calendarpb.Tag}
 */
proto.calendarpb.ResponseTag.prototype.getTag = function() {
  return /** @type{?proto.calendarpb.Tag} */ (
    jspb.Message.getWrapperField(this, proto.calendarpb.Tag, 1));
};


/**
 * @param {?proto.calendarpb.Tag|undefined} value
 * @return {!proto.calendarpb.ResponseTag} returns this
*/
proto.calendarpb.ResponseTag.prototype.setTag = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.calendarpb.ResponseTag} returns this
 */
proto.calendarpb.ResponseTag.prototype.clearTag = function() {
  return this.setTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.calendarpb.ResponseTag.prototype.hasTag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseStatusCode statusCode = 2;
 * @return {!proto.calendarpb.ResponseStatusCode}
 */
proto.calendarpb.ResponseTag.prototype.getStatuscode = function() {
  return /** @type {!proto.calendarpb.ResponseStatusCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.calendarpb.ResponseStatusCode} value
 * @return {!proto.calendarpb.ResponseTag} returns this
 */
proto.calendarpb.ResponseTag.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.calendarpb.ScheduleList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.calendarpb.ScheduleList.prototype.toObject = function(opt_includeInstance) {
  return proto.calendarpb.ScheduleList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.calendarpb.ScheduleList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.calendarpb.ScheduleList.toObject = function(includeInstance, msg) {
  var f, obj = {
    schedulelistList: jspb.Message.toObjectList(msg.getSchedulelistList(),
    proto.calendarpb.Schedule.toObject, includeInstance),
    statuscode: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.calendarpb.ScheduleList}
 */
proto.calendarpb.ScheduleList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.calendarpb.ScheduleList;
  return proto.calendarpb.ScheduleList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.calendarpb.ScheduleList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.calendarpb.ScheduleList}
 */
proto.calendarpb.ScheduleList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.calendarpb.Schedule;
      reader.readMessage(value,proto.calendarpb.Schedule.deserializeBinaryFromReader);
      msg.addSchedulelist(value);
      break;
    case 2:
      var value = /** @type {!proto.calendarpb.ResponseStatusCode} */ (reader.readEnum());
      msg.setStatuscode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.calendarpb.ScheduleList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.calendarpb.ScheduleList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.calendarpb.ScheduleList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.calendarpb.ScheduleList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchedulelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.calendarpb.Schedule.serializeBinaryToWriter
    );
  }
  f = message.getStatuscode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated Schedule scheduleList = 1;
 * @return {!Array<!proto.calendarpb.Schedule>}
 */
proto.calendarpb.ScheduleList.prototype.getSchedulelistList = function() {
  return /** @type{!Array<!proto.calendarpb.Schedule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.calendarpb.Schedule, 1));
};


/**
 * @param {!Array<!proto.calendarpb.Schedule>} value
 * @return {!proto.calendarpb.ScheduleList} returns this
*/
proto.calendarpb.ScheduleList.prototype.setSchedulelistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.calendarpb.Schedule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.calendarpb.Schedule}
 */
proto.calendarpb.ScheduleList.prototype.addSchedulelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.calendarpb.Schedule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.calendarpb.ScheduleList} returns this
 */
proto.calendarpb.ScheduleList.prototype.clearSchedulelistList = function() {
  return this.setSchedulelistList([]);
};


/**
 * optional ResponseStatusCode statusCode = 2;
 * @return {!proto.calendarpb.ResponseStatusCode}
 */
proto.calendarpb.ScheduleList.prototype.getStatuscode = function() {
  return /** @type {!proto.calendarpb.ResponseStatusCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.calendarpb.ResponseStatusCode} value
 * @return {!proto.calendarpb.ScheduleList} returns this
 */
proto.calendarpb.ScheduleList.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.calendarpb.TagList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.calendarpb.TagList.prototype.toObject = function(opt_includeInstance) {
  return proto.calendarpb.TagList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.calendarpb.TagList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.calendarpb.TagList.toObject = function(includeInstance, msg) {
  var f, obj = {
    taglistList: jspb.Message.toObjectList(msg.getTaglistList(),
    proto.calendarpb.Tag.toObject, includeInstance),
    statuscode: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.calendarpb.TagList}
 */
proto.calendarpb.TagList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.calendarpb.TagList;
  return proto.calendarpb.TagList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.calendarpb.TagList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.calendarpb.TagList}
 */
proto.calendarpb.TagList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.calendarpb.Tag;
      reader.readMessage(value,proto.calendarpb.Tag.deserializeBinaryFromReader);
      msg.addTaglist(value);
      break;
    case 2:
      var value = /** @type {!proto.calendarpb.ResponseStatusCode} */ (reader.readEnum());
      msg.setStatuscode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.calendarpb.TagList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.calendarpb.TagList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.calendarpb.TagList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.calendarpb.TagList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaglistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.calendarpb.Tag.serializeBinaryToWriter
    );
  }
  f = message.getStatuscode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated Tag tagList = 1;
 * @return {!Array<!proto.calendarpb.Tag>}
 */
proto.calendarpb.TagList.prototype.getTaglistList = function() {
  return /** @type{!Array<!proto.calendarpb.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.calendarpb.Tag, 1));
};


/**
 * @param {!Array<!proto.calendarpb.Tag>} value
 * @return {!proto.calendarpb.TagList} returns this
*/
proto.calendarpb.TagList.prototype.setTaglistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.calendarpb.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.calendarpb.Tag}
 */
proto.calendarpb.TagList.prototype.addTaglist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.calendarpb.Tag, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.calendarpb.TagList} returns this
 */
proto.calendarpb.TagList.prototype.clearTaglistList = function() {
  return this.setTaglistList([]);
};


/**
 * optional ResponseStatusCode statusCode = 2;
 * @return {!proto.calendarpb.ResponseStatusCode}
 */
proto.calendarpb.TagList.prototype.getStatuscode = function() {
  return /** @type {!proto.calendarpb.ResponseStatusCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.calendarpb.ResponseStatusCode} value
 * @return {!proto.calendarpb.TagList} returns this
 */
proto.calendarpb.TagList.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.calendarpb.ResponseStatusCode = {
  UNKNOWN: 0,
  SUCCESS: 1,
  FAILED: 2
};

goog.object.extend(exports, proto.calendarpb);
